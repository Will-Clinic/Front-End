// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WillClinic.Data;

namespace WillClinic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180227013254_WillClinic01")]
    partial class WillClinic01
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WillClinic.Models.Admin", b =>
                {
                    b.Property<string>("ApplicationUserId");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("WillClinic.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<string>("EmailAddress");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserType");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WillClinic.Models.Lawyer", b =>
                {
                    b.Property<string>("ApplicationUserId");

                    b.Property<int>("BarNumber");

                    b.Property<string>("City");

                    b.Property<string>("ConfirmPassword");

                    b.Property<string>("Country");

                    b.Property<DateTime>("DOB");

                    b.Property<bool>("OtherLanguages");

                    b.Property<string>("Password");

                    b.Property<string>("PracticeAreas");

                    b.Property<string>("State");

                    b.Property<int>("ZipCode");

                    b.HasKey("ApplicationUserId");

                    b.ToTable("Lawyer_1");
                });

            modelBuilder.Entity("WillClinic.Models.Veteran", b =>
                {
                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MiddleInitial")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ApplicationUserId");

                    b.ToTable("Veteran");
                });

            modelBuilder.Entity("WillClinic.Models.VeteranChildren", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DOB");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Lineage")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MotherOfChildName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ParentApplicationUserId");

                    b.Property<string>("VeteranModelApplicationUserId");

                    b.HasKey("ID");

                    b.HasIndex("ParentApplicationUserId");

                    b.ToTable("VeteranChildren");
                });

            modelBuilder.Entity("WillClinic.Models.VeteranIntake", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("AuthorApplicationUserId");

                    b.Property<int>("BankAccountAssests");

                    b.Property<string>("BequestInfromation")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("BusinessInterest");

                    b.Property<bool>("CurrentlyPregnant");

                    b.Property<string>("FullLegalName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FullNameSpouse")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("HaveChildren");

                    b.Property<int>("HouseHoldSiza");

                    b.Property<int>("LifeInsuranceCashValue");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MinorChildrenDifferentSpouse")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("MoneyOwedToYou");

                    b.Property<int>("MonthlyIncome");

                    b.Property<bool>("NetWorth");

                    b.Property<int>("OtherAssestsOrMoney");

                    b.Property<int>("Pension");

                    b.Property<int>("PhoneNumber");

                    b.Property<bool>("ProofOfService");

                    b.Property<int>("RealEstateAssest");

                    b.Property<bool>("ResidentStatus");

                    b.Property<int>("RetirementAccounts");

                    b.Property<bool>("SpecificBequest");

                    b.Property<int>("StockBonds");

                    b.Property<bool>("TermsAndConditions");

                    b.Property<bool>("UnderAgeChildren");

                    b.Property<string>("VeteranModelApplicationUserId");

                    b.Property<bool>("VeteranStatus");

                    b.HasKey("ID");

                    b.HasIndex("AuthorApplicationUserId");

                    b.ToTable("VeteranIntake");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WillClinic.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WillClinic.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WillClinic.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WillClinic.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WillClinic.Models.Admin", b =>
                {
                    b.HasOne("WillClinic.Models.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("WillClinic.Models.Admin", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WillClinic.Models.Lawyer", b =>
                {
                    b.HasOne("WillClinic.Models.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("WillClinic.Models.Lawyer", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WillClinic.Models.Veteran", b =>
                {
                    b.HasOne("WillClinic.Models.ApplicationUser", "ApplicationUser")
                        .WithOne()
                        .HasForeignKey("WillClinic.Models.Veteran", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WillClinic.Models.VeteranChildren", b =>
                {
                    b.HasOne("WillClinic.Models.Veteran", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentApplicationUserId");
                });

            modelBuilder.Entity("WillClinic.Models.VeteranIntake", b =>
                {
                    b.HasOne("WillClinic.Models.Veteran", "Author")
                        .WithMany("IntakeForms")
                        .HasForeignKey("AuthorApplicationUserId");
                });
#pragma warning restore 612, 618
        }
    }
}
